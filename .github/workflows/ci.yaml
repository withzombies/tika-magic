name: CI

on:
  push:
    branches: [main]
  pull_request:

jobs:
  test-lib:
    name: Test Library (${{ matrix.os }}, ${{ matrix.rust }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        rust: [stable, 1.73.0, nightly]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust (${{ matrix.rust }})
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}

      - name: Check lib package
        run: cd lib && cargo check --tests

      - name: Run clippy on lib
        run: cd lib && cargo clippy --all-targets --all-features -- -D warnings

      - name: Check formatting on lib  
        run: cd lib && cargo fmt --check

      - name: Test lib package
        run: cd lib && cargo test

      - name: Test lib package with features
        run: cd lib && cargo test --features "open_zips,open_ole"

  test-file:
    name: Test CLI Tool (${{ matrix.os }}, ${{ matrix.rust }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        rust: [stable, 1.88.0, nightly]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust (${{ matrix.rust }})
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}

      - name: Check file binary
        run: cd file && cargo check

      - name: Run clippy on file
        run: cd file && cargo clippy --all-targets -- -D warnings

      - name: Check formatting on file
        run: cd file && cargo fmt --check

      - name: Test file binary
        run: cd file && cargo test

  test-tools:
    name: Test Tools (${{ matrix.os }}, ${{ matrix.rust }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        rust: [stable, 1.88.0, nightly]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust (${{ matrix.rust }})
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}

      - name: Check parse_definitions binary
        run: cd tools/parse_definitions && cargo check

      - name: Run clippy on tools
        run: cd tools/parse_definitions && cargo clippy --all-targets -- -D warnings

      - name: Check formatting on tools
        run: cd tools/parse_definitions && cargo fmt --check

      - name: Test parse_definitions binary
        run: cd tools/parse_definitions && cargo test
